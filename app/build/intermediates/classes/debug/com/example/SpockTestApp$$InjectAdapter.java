// Code generated by dagger-compiler.  Do not edit.
package com.example;

import dagger.MembersInjector;
import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<SpockTestApp>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code SpockTestApp} and its
 * dependencies.
 *
 * Being a {@code Provider<SpockTestApp>} and handling creation and
 * preparation of object instances.
 *
 * Being a {@code MembersInjector<SpockTestApp>} and handling injection
 * of annotated fields.
 */
public final class SpockTestApp$$InjectAdapter extends Binding<SpockTestApp>
    implements Provider<SpockTestApp>, MembersInjector<SpockTestApp> {
  private Binding<com.example.ui.ActivityHierarchyServer> activityHierarchyServer;
  private Binding<SpockTestInitializer> initializer;

  public SpockTestApp$$InjectAdapter() {
    super("com.example.SpockTestApp", "members/com.example.SpockTestApp", NOT_SINGLETON, SpockTestApp.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    activityHierarchyServer = (Binding<com.example.ui.ActivityHierarchyServer>) linker.requestBinding("com.example.ui.ActivityHierarchyServer", SpockTestApp.class, getClass().getClassLoader());
    initializer = (Binding<SpockTestInitializer>) linker.requestBinding("com.example.SpockTestInitializer", SpockTestApp.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    injectMembersBindings.add(activityHierarchyServer);
    injectMembersBindings.add(initializer);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<SpockTestApp>}.
   */
  @Override
  public SpockTestApp get() {
    SpockTestApp result = new SpockTestApp();
    injectMembers(result);
    return result;
  }

  /**
   * Injects any {@code @Inject} annotated fields in the given instance,
   * satisfying the contract for {@code Provider<SpockTestApp>}.
   */
  @Override
  public void injectMembers(SpockTestApp object) {
    object.activityHierarchyServer = activityHierarchyServer.get();
    object.initializer = initializer.get();
  }

}
