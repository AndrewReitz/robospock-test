// Code generated by dagger-compiler.  Do not edit.
package com.example.ui.debug;

import dagger.internal.Binding;
import dagger.internal.Linker;
import java.util.Set;
import javax.inject.Provider;

/**
 * A {@code Binding<DebugAppContainer>} implementation which satisfies
 * Dagger's infrastructure requirements including:
 *
 * Owning the dependency links between {@code DebugAppContainer} and its
 * dependencies.
 *
 * Being a {@code Provider<DebugAppContainer>} and handling creation and
 * preparation of object instances.
 */
public final class DebugAppContainer$$InjectAdapter extends Binding<DebugAppContainer>
    implements Provider<DebugAppContainer> {
  private Binding<com.inkapplications.preferences.BooleanPreference> pixelGridEnabled;
  private Binding<com.inkapplications.preferences.BooleanPreference> pixelRatioEnabled;
  private Binding<com.inkapplications.preferences.IntPreference> animationSpeed;
  private Binding<com.inkapplications.preferences.BooleanPreference> scalpelEnabled;
  private Binding<com.inkapplications.preferences.BooleanPreference> scalpelWireframeEnabled;
  private Binding<com.inkapplications.preferences.BooleanPreference> seenDebugDrawer;

  public DebugAppContainer$$InjectAdapter() {
    super("com.example.ui.debug.DebugAppContainer", "members/com.example.ui.debug.DebugAppContainer", IS_SINGLETON, DebugAppContainer.class);
  }

  /**
   * Used internally to link bindings/providers together at run time
   * according to their dependency graph.
   */
  @Override
  @SuppressWarnings("unchecked")
  public void attach(Linker linker) {
    pixelGridEnabled = (Binding<com.inkapplications.preferences.BooleanPreference>) linker.requestBinding("@com.example.data.PixelGridEnabled()/com.inkapplications.preferences.BooleanPreference", DebugAppContainer.class, getClass().getClassLoader());
    pixelRatioEnabled = (Binding<com.inkapplications.preferences.BooleanPreference>) linker.requestBinding("@com.example.data.PixelRatioEnabled()/com.inkapplications.preferences.BooleanPreference", DebugAppContainer.class, getClass().getClassLoader());
    animationSpeed = (Binding<com.inkapplications.preferences.IntPreference>) linker.requestBinding("@com.example.data.AnimationSpeed()/com.inkapplications.preferences.IntPreference", DebugAppContainer.class, getClass().getClassLoader());
    scalpelEnabled = (Binding<com.inkapplications.preferences.BooleanPreference>) linker.requestBinding("@com.example.data.ScalpelEnabled()/com.inkapplications.preferences.BooleanPreference", DebugAppContainer.class, getClass().getClassLoader());
    scalpelWireframeEnabled = (Binding<com.inkapplications.preferences.BooleanPreference>) linker.requestBinding("@com.example.data.ScalpelWireframeEnabled()/com.inkapplications.preferences.BooleanPreference", DebugAppContainer.class, getClass().getClassLoader());
    seenDebugDrawer = (Binding<com.inkapplications.preferences.BooleanPreference>) linker.requestBinding("@com.example.data.SeenDebugDrawer()/com.inkapplications.preferences.BooleanPreference", DebugAppContainer.class, getClass().getClassLoader());
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
    getBindings.add(pixelGridEnabled);
    getBindings.add(pixelRatioEnabled);
    getBindings.add(animationSpeed);
    getBindings.add(scalpelEnabled);
    getBindings.add(scalpelWireframeEnabled);
    getBindings.add(seenDebugDrawer);
  }

  /**
   * Returns the fully provisioned instance satisfying the contract for
   * {@code Provider<DebugAppContainer>}.
   */
  @Override
  public DebugAppContainer get() {
    DebugAppContainer result = new DebugAppContainer(pixelGridEnabled.get(), pixelRatioEnabled.get(), animationSpeed.get(), scalpelEnabled.get(), scalpelWireframeEnabled.get(), seenDebugDrawer.get());
    return result;
  }

}
