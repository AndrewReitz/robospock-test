// Code generated by dagger-compiler.  Do not edit.
package com.example.ui;

import dagger.internal.BindingsGroup;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class UiModule$$ModuleAdapter extends ModuleAdapter<UiModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public UiModule$$ModuleAdapter() {
    super(com.example.ui.UiModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public UiModule newModule() {
    return new com.example.ui.UiModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, UiModule module) {
    bindings.contributeProvidesBinding("com.example.ui.AppContainer", new ProvideAppContainerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.example.ui.ActivityHierarchyServer", new ProvideActivityHierarchyServerProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.example.ui.AppContainer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.example.ui.AppContainer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAppContainerProvidesAdapter extends ProvidesBinding<AppContainer>
      implements Provider<AppContainer> {
    private final UiModule module;

    public ProvideAppContainerProvidesAdapter(UiModule module) {
      super("com.example.ui.AppContainer", IS_SINGLETON, "com.example.ui.UiModule", "provideAppContainer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.ui.AppContainer>}.
     */
    @Override
    public AppContainer get() {
      return module.provideAppContainer();
    }
  }

  /**
   * A {@code Binding<com.example.ui.ActivityHierarchyServer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.example.ui.ActivityHierarchyServer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityHierarchyServerProvidesAdapter extends ProvidesBinding<ActivityHierarchyServer>
      implements Provider<ActivityHierarchyServer> {
    private final UiModule module;

    public ProvideActivityHierarchyServerProvidesAdapter(UiModule module) {
      super("com.example.ui.ActivityHierarchyServer", IS_SINGLETON, "com.example.ui.UiModule", "provideActivityHierarchyServer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.ui.ActivityHierarchyServer>}.
     */
    @Override
    public ActivityHierarchyServer get() {
      return module.provideActivityHierarchyServer();
    }
  }
}
