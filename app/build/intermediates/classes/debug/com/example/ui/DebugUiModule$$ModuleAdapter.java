// Code generated by dagger-compiler.  Do not edit.
package com.example.ui;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DebugUiModule$$ModuleAdapter extends ModuleAdapter<DebugUiModule> {
  private static final String[] INJECTS = { "members/com.example.ui.debug.DebugAppContainer", };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DebugUiModule$$ModuleAdapter() {
    super(com.example.ui.DebugUiModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public DebugUiModule newModule() {
    return new com.example.ui.DebugUiModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DebugUiModule module) {
    bindings.contributeProvidesBinding("com.example.ui.AppContainer", new ProvideAppContainerProvidesAdapter(module));
    bindings.contributeProvidesBinding("com.example.ui.ActivityHierarchyServer", new ProvideActivityHierarchyServerProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.example.ui.AppContainer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.example.ui.AppContainer} and its
   * dependencies.
   *
   * Being a {@code Provider<com.example.ui.AppContainer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAppContainerProvidesAdapter extends ProvidesBinding<AppContainer>
      implements Provider<AppContainer> {
    private final DebugUiModule module;
    private Binding<com.example.ui.debug.DebugAppContainer> debugAppContainer;

    public ProvideAppContainerProvidesAdapter(DebugUiModule module) {
      super("com.example.ui.AppContainer", IS_SINGLETON, "com.example.ui.DebugUiModule", "provideAppContainer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      debugAppContainer = (Binding<com.example.ui.debug.DebugAppContainer>) linker.requestBinding("com.example.ui.debug.DebugAppContainer", DebugUiModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(debugAppContainer);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.ui.AppContainer>}.
     */
    @Override
    public AppContainer get() {
      return module.provideAppContainer(debugAppContainer.get());
    }
  }

  /**
   * A {@code Binding<com.example.ui.ActivityHierarchyServer>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Being a {@code Provider<com.example.ui.ActivityHierarchyServer>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideActivityHierarchyServerProvidesAdapter extends ProvidesBinding<ActivityHierarchyServer>
      implements Provider<ActivityHierarchyServer> {
    private final DebugUiModule module;

    public ProvideActivityHierarchyServerProvidesAdapter(DebugUiModule module) {
      super("com.example.ui.ActivityHierarchyServer", IS_SINGLETON, "com.example.ui.DebugUiModule", "provideActivityHierarchyServer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.example.ui.ActivityHierarchyServer>}.
     */
    @Override
    public ActivityHierarchyServer get() {
      return module.provideActivityHierarchyServer();
    }
  }
}
