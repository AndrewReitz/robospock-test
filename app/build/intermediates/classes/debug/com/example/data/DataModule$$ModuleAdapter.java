// Code generated by dagger-compiler.  Do not edit.
package com.example.data;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DataModule$$ModuleAdapter extends ModuleAdapter<DataModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DataModule$$ModuleAdapter() {
    super(com.example.data.DataModule.class, INJECTS, STATIC_INJECTIONS, false /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public DataModule newModule() {
    return new com.example.data.DataModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DataModule module) {
    bindings.contributeProvidesBinding("android.content.SharedPreferences", new ProvideSharedPreferencesProvidesAdapter(module));
  }

  /**
   * A {@code Binding<android.content.SharedPreferences>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code android.content.SharedPreferences} and its
   * dependencies.
   *
   * Being a {@code Provider<android.content.SharedPreferences>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSharedPreferencesProvidesAdapter extends ProvidesBinding<android.content.SharedPreferences>
      implements Provider<android.content.SharedPreferences> {
    private final DataModule module;
    private Binding<android.app.Application> app;

    public ProvideSharedPreferencesProvidesAdapter(DataModule module) {
      super("android.content.SharedPreferences", IS_SINGLETON, "com.example.data.DataModule", "provideSharedPreferences");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      app = (Binding<android.app.Application>) linker.requestBinding("android.app.Application", DataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(app);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<android.content.SharedPreferences>}.
     */
    @Override
    public android.content.SharedPreferences get() {
      return module.provideSharedPreferences(app.get());
    }
  }
}
