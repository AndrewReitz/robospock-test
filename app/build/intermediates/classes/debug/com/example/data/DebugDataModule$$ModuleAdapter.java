// Code generated by dagger-compiler.  Do not edit.
package com.example.data;

import dagger.internal.Binding;
import dagger.internal.BindingsGroup;
import dagger.internal.Linker;
import dagger.internal.ModuleAdapter;
import dagger.internal.ProvidesBinding;
import java.util.Set;
import javax.inject.Provider;

/**
 * A manager of modules and provides adapters allowing for proper linking and
 * instance provision of types served by {@code @Provides} methods.
 */
public final class DebugDataModule$$ModuleAdapter extends ModuleAdapter<DebugDataModule> {
  private static final String[] INJECTS = { };
  private static final Class<?>[] STATIC_INJECTIONS = { };
  private static final Class<?>[] INCLUDES = { };

  public DebugDataModule$$ModuleAdapter() {
    super(com.example.data.DebugDataModule.class, INJECTS, STATIC_INJECTIONS, true /*overrides*/, INCLUDES, false /*complete*/, true /*library*/);
  }

  @Override
  public DebugDataModule newModule() {
    return new com.example.data.DebugDataModule();
  }

  /**
   * Used internally obtain dependency information, such as for cyclical
   * graph detection.
   */
  @Override
  public void getBindings(BindingsGroup bindings, DebugDataModule module) {
    bindings.contributeProvidesBinding("@com.example.data.AnimationSpeed()/com.inkapplications.preferences.IntPreference", new ProvideAnimationSpeedProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.example.data.PixelGridEnabled()/com.inkapplications.preferences.BooleanPreference", new ProvidePixelGridEnabledProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.example.data.PixelRatioEnabled()/com.inkapplications.preferences.BooleanPreference", new ProvidePixelRatioEnabledProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.example.data.SeenDebugDrawer()/com.inkapplications.preferences.BooleanPreference", new ProvideSeenDebugDrawerProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.example.data.ScalpelEnabled()/com.inkapplications.preferences.BooleanPreference", new ProvideScalpelEnabledProvidesAdapter(module));
    bindings.contributeProvidesBinding("@com.example.data.ScalpelWireframeEnabled()/com.inkapplications.preferences.BooleanPreference", new ProvideScalpelWireframeEnabledProvidesAdapter(module));
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.IntPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.IntPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.IntPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideAnimationSpeedProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.IntPreference>
      implements Provider<com.inkapplications.preferences.IntPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvideAnimationSpeedProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.AnimationSpeed()/com.inkapplications.preferences.IntPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "provideAnimationSpeed");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.IntPreference>}.
     */
    @Override
    public com.inkapplications.preferences.IntPreference get() {
      return module.provideAnimationSpeed(preferences.get());
    }
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePixelGridEnabledProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.BooleanPreference>
      implements Provider<com.inkapplications.preferences.BooleanPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvidePixelGridEnabledProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.PixelGridEnabled()/com.inkapplications.preferences.BooleanPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "providePixelGridEnabled");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.BooleanPreference>}.
     */
    @Override
    public com.inkapplications.preferences.BooleanPreference get() {
      return module.providePixelGridEnabled(preferences.get());
    }
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvidePixelRatioEnabledProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.BooleanPreference>
      implements Provider<com.inkapplications.preferences.BooleanPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvidePixelRatioEnabledProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.PixelRatioEnabled()/com.inkapplications.preferences.BooleanPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "providePixelRatioEnabled");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.BooleanPreference>}.
     */
    @Override
    public com.inkapplications.preferences.BooleanPreference get() {
      return module.providePixelRatioEnabled(preferences.get());
    }
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideSeenDebugDrawerProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.BooleanPreference>
      implements Provider<com.inkapplications.preferences.BooleanPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvideSeenDebugDrawerProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.SeenDebugDrawer()/com.inkapplications.preferences.BooleanPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "provideSeenDebugDrawer");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.BooleanPreference>}.
     */
    @Override
    public com.inkapplications.preferences.BooleanPreference get() {
      return module.provideSeenDebugDrawer(preferences.get());
    }
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideScalpelEnabledProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.BooleanPreference>
      implements Provider<com.inkapplications.preferences.BooleanPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvideScalpelEnabledProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.ScalpelEnabled()/com.inkapplications.preferences.BooleanPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "provideScalpelEnabled");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.BooleanPreference>}.
     */
    @Override
    public com.inkapplications.preferences.BooleanPreference get() {
      return module.provideScalpelEnabled(preferences.get());
    }
  }

  /**
   * A {@code Binding<com.inkapplications.preferences.BooleanPreference>} implementation which satisfies
   * Dagger's infrastructure requirements including:
   *
   * Owning the dependency links between {@code com.inkapplications.preferences.BooleanPreference} and its
   * dependencies.
   *
   * Being a {@code Provider<com.inkapplications.preferences.BooleanPreference>} and handling creation and
   * preparation of object instances.
   */
  public static final class ProvideScalpelWireframeEnabledProvidesAdapter extends ProvidesBinding<com.inkapplications.preferences.BooleanPreference>
      implements Provider<com.inkapplications.preferences.BooleanPreference> {
    private final DebugDataModule module;
    private Binding<android.content.SharedPreferences> preferences;

    public ProvideScalpelWireframeEnabledProvidesAdapter(DebugDataModule module) {
      super("@com.example.data.ScalpelWireframeEnabled()/com.inkapplications.preferences.BooleanPreference", IS_SINGLETON, "com.example.data.DebugDataModule", "provideScalpelWireframeEnabled");
      this.module = module;
      setLibrary(true);
    }

    /**
     * Used internally to link bindings/providers together at run time
     * according to their dependency graph.
     */
    @Override
    @SuppressWarnings("unchecked")
    public void attach(Linker linker) {
      preferences = (Binding<android.content.SharedPreferences>) linker.requestBinding("android.content.SharedPreferences", DebugDataModule.class, getClass().getClassLoader());
    }

    /**
     * Used internally obtain dependency information, such as for cyclical
     * graph detection.
     */
    @Override
    public void getDependencies(Set<Binding<?>> getBindings, Set<Binding<?>> injectMembersBindings) {
      getBindings.add(preferences);
    }

    /**
     * Returns the fully provisioned instance satisfying the contract for
     * {@code Provider<com.inkapplications.preferences.BooleanPreference>}.
     */
    @Override
    public com.inkapplications.preferences.BooleanPreference get() {
      return module.provideScalpelWireframeEnabled(preferences.get());
    }
  }
}
